<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tejas Anand</title>
    <link>https://andTEJAsan.github.io/</link>
    <description>Recent content on Tejas Anand</description>
    <generator>Hugo -- 0.128.0</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Jul 2024 17:15:58 +0530</lastBuildDate>
    <atom:link href="https://andTEJAsan.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Market Making Limit OrderBook</title>
      <link>https://andTEJAsan.github.io/projects/lobook/</link>
      <pubDate>Tue, 30 Jul 2024 17:15:58 +0530</pubDate>
      <guid>https://andTEJAsan.github.io/projects/lobook/</guid>
      <description>During the summer in kyoto I got the chance to participate in a simulated trading event called Trade-A-Thon organized by Optiver. It was an exciting event for me, as I learnt about market making and what an order book is. Upon seeing the simple UI of the platform on which the event was conducted I thought to myself that I should try building it, as it would be a good exercise for me to learn about orderbooks as well.</description>
    </item>
    <item>
      <title>ChaTRoom using boost::asio</title>
      <link>https://andTEJAsan.github.io/projects/chatroom/</link>
      <pubDate>Tue, 30 Jul 2024 17:03:39 +0530</pubDate>
      <guid>https://andTEJAsan.github.io/projects/chatroom/</guid>
      <description>This project is a simple chat room application implemented using the boost::asio library in C++. The chat room allows multiple clients to connect to a server and exchange messages in real-time. The server acts as a central hub, relaying messages between clients.
You can also whisper to specific clients by mentioning their username in the message. The server will ensure that the message is delivered only to the intended recipient.</description>
    </item>
    <item>
      <title>Building Reliable Congestion Control Protocol</title>
      <link>https://andTEJAsan.github.io/projects/tcp/</link>
      <pubDate>Tue, 30 Jul 2024 16:53:42 +0530</pubDate>
      <guid>https://andTEJAsan.github.io/projects/tcp/</guid>
      <description>The objective of this assignment was to design a TCP protocol capable of downloading and uploading reliably while dealing with congestion efficiently The server was implemented as a leaky bucket, every time we sent a request our tokens would get consumed, if our bucket became empty we would get squished and get penalised. The server would also randomly drop packets, designed to simulate a real time network. So we had to modify the rate of sending requests adaptively based on various metrics like EWMA RTT, Last squish time to optimise for speed while maintaining reliability.</description>
    </item>
    <item>
      <title>Distributed Maze Generator</title>
      <link>https://andTEJAsan.github.io/projects/distrgraph/</link>
      <pubDate>Tue, 30 Jul 2024 16:46:09 +0530</pubDate>
      <guid>https://andTEJAsan.github.io/projects/distrgraph/</guid>
      <description>In this project, I undertook implemented distributed versions of well-known graph algorithms such as Prim&amp;rsquo;s, Dijkstra&amp;rsquo;s, Kruskal&amp;rsquo;s, DFS, and BFS specifically tailored for maze generation and solving, using the MPI library in C++.
To achieve parallelization, I employed a strategy for BFS and Dijkstra&amp;rsquo;s algorithms. I introduced the concept of node ownership, assigning specific nodes in the graph to different processors. This allowed for a more balanced distribution of work and enabled efficient parallel processing of the graph.</description>
    </item>
    <item>
      <title>Copy on Write with Swapping in xv6</title>
      <link>https://andTEJAsan.github.io/projects/cowxv6/</link>
      <pubDate>Tue, 30 Jul 2024 16:35:57 +0530</pubDate>
      <guid>https://andTEJAsan.github.io/projects/cowxv6/</guid>
      <description>Copy on Write (COW) is a memory management technique that allows multiple processes to share the same memory pages until one of them modifies the content. When a process attempts to modify a shared page, a copy of that page is created, ensuring that the original page remains unchanged. This approach minimizes memory duplication and improves efficiency by reducing the need for unnecessary memory copies.
Swapping, on the other hand, is a process where the operating system moves pages of memory between the physical memory (RAM) and the disk.</description>
    </item>
    <item>
      <title>Reflecting upon my time in Kyoto</title>
      <link>https://andTEJAsan.github.io/blogs/kyoto/</link>
      <pubDate>Thu, 04 Jul 2024 18:08:32 +0900</pubDate>
      <guid>https://andTEJAsan.github.io/blogs/kyoto/</guid>
      <description>Status Quo Over the past one and a half month, I have been living in kyoto as a research intern at Kyoto University. I was among the lucky 18 students selected from the IITs for the KU-STAR (Kyoto University Short Term Academic Research Program).
I have been working with Professor Kohei Suenaga in Professor Atsushi Igarashi&amp;rsquo;s Lab in the Graduate School of Informatics.
Konkai Komyoji Temple</description>
    </item>
    <item>
      <title>What the Condition ? An Intro To Condition Variables</title>
      <link>https://andTEJAsan.github.io/blogs/condvar/</link>
      <pubDate>Wed, 03 Jul 2024 17:03:06 +0900</pubDate>
      <guid>https://andTEJAsan.github.io/blogs/condvar/</guid>
      <description>Introduction Are you hearing this term for the first time ? Or maybe you&amp;rsquo;ve heard it before but never really understood it ? Or maybe you&amp;rsquo;ve banged your head against the wall trying to understand it numerous times ?
Well, you&amp;rsquo;re in luck. This post is for you.
Condition variables are a synchronization primitive in POSIX (Portable Operating System Interface) systems that allow threads to wait for certain conditions to become true.</description>
    </item>
    <item>
      <title>Do you know how the computer boots up ?</title>
      <link>https://andTEJAsan.github.io/blogs/bootup/</link>
      <pubDate>Tue, 02 Jul 2024 17:02:37 +0900</pubDate>
      <guid>https://andTEJAsan.github.io/blogs/bootup/</guid>
      <description></description>
    </item>
    <item>
      <title>The End ?</title>
      <link>https://andTEJAsan.github.io/blogs/final_presentation/</link>
      <pubDate>Tue, 02 Jul 2024 16:57:14 +0900</pubDate>
      <guid>https://andTEJAsan.github.io/blogs/final_presentation/</guid>
      <description>Another phase of my life has ended. Let’s think about what every moment felt like.
Right now, I’m sitting in a bus to Oakwood Hotel, and I took a quick peek inside my mind, wondering, “What did it feel like?” And what’s the answer I got? A void. That’s right, a void.
Some of you (if you are reading this, understand that you are a statistical anomaly among the people who are my “acquaintances”) might be wondering how I could feel a void when everything seems alright in my life.</description>
    </item>
    <item>
      <title>About</title>
      <link>https://andTEJAsan.github.io/about/about/</link>
      <pubDate>Sun, 30 Jun 2024 14:50:12 +0900</pubDate>
      <guid>https://andTEJAsan.github.io/about/about/</guid>
      <description>If you want to know me, this is the correct place to be. First of all I understand that you must be having some preconceived notion of what kind of a human being I am. But the human mind is so complex even the thought of having a preconceived notion seems funny to me.
What fascinates me is the fact that we are all so different from each other. We all have our own unique experiences, our own unique way of looking at the world.</description>
    </item>
  </channel>
</rss>
